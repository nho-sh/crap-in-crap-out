// Generated by CoffeeScript 2.4.1
var assert, guardian, notAFunction, notInteger, notString;

assert = require('assert');

({guardian} = require('../src'));

({notAFunction} = require('../src/errors'));

({notString, notInteger} = require('./_generators'));

describe('guardian', function() {
  it('guardian checks input', function() {
    assert.throws(function() {
      return guardian(null, null);
    }, /Guardian got no schema's to validate with, pass either input or out schema, or both./);
    assert.throws(function() {
      return guardian({}, {}, {});
    }, /Guardian only excepts input_schema and out_schema, no further arguments. You supplied 3/);
    assert.throws(function() {
      return guardian({}, {});
    }, /Guardian input schema always needs to be an array of schemas, one for each input argument. It can also be null or undefined./);
    return assert.throws(function() {
      return guardian([{}], {})({});
    }, new RegExp(notAFunction));
  });
  it('guardian works on empty schemas', function() {
    return guardian([{}], {})(function() {});
  });
  it('guardian works on output schemas only', function() {
    return guardian(null, 'integer')(function() {
      return 10;
    })();
  });
  it('guardian works on input schemas only', function() {
    return guardian([{}])(function() {})();
  });
  return it('guardian properly validates inputs and outputs', function() {
    var dinlas, elevenPercent;
    dinlas = guardian(['integer', 'integer'], 'integer');
    elevenPercent = dinlas(function(arg1, arg2) {
      return (arg1 + arg2) * 1.1;
    });
    assert(elevenPercent(10, 0) === 11);
    
    // Check for proper output validation
    // elevenPercent(10, 1) => 12.1
    assert.throws(function() {
      return elevenPercent(10, 1) === 11;
    }, /:integer Not an integer/);
    
    // Check for proper input validation
    return assert.throws(function() {
      return elevenPercent(10, 1.1);
    }, /Guarding input failed \[1\]:integer Not an integer: 1.1/);
  });
});
